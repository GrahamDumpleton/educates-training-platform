#@ load("@ytt:data", "data")

#@ if data.values.clusterSecurity.policyEngine == "pod-security-policies":
---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: #@ "aaa-{}-training-portal".format(data.values.operator.namePrefix)
spec:
  allowPrivilegeEscalation: false
  fsGroup:
    ranges:
      - min: 0
        max: 65535
    rule: MustRunAs
  hostIPC: false
  hostNetwork: false
  hostPID: false
  hostPorts: []
  privileged: false
  requiredDropCapabilities:
    - ALL
  runAsUser:
    rule: MustRunAsNonRoot
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    ranges:
      - min: 0
        max: 65535
    rule: MustRunAs
  volumes:
    - configMap
    - downwardAPI
    - emptyDir
    - persistentVolumeClaim
    - projected
    - secret

---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: #@ "aaa-{}-anyuid-session".format(data.values.operator.namePrefix)
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: "*"
spec:
  allowPrivilegeEscalation: false
  fsGroup:
    ranges:
      - min: 0
        max: 65535
    rule: MustRunAs
  hostIPC: false
  hostNetwork: false
  hostPID: false
  hostPorts: []
  privileged: false
  requiredDropCapabilities:
    - ALL
  defaultAddCapabilities:
    - NET_BIND_SERVICE
  runAsUser:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    ranges:
      - min: 0
        max: 65535
    rule: MustRunAs
  volumes:
    - configMap
    - downwardAPI
    - emptyDir
    - persistentVolumeClaim
    - projected
    - secret

---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: #@ "aaa-{}-nonroot-session".format(data.values.operator.namePrefix)
  annotations:
    #! seccomp.security.alpha.kubernetes.io/allowedProfileNames: docker/default,runtime/default
    #! Need to allow anything because if none are defined pod security policies
    #! don't seem to be very tolerate of setting this as runtime/default.
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: '*'
spec:
  allowPrivilegeEscalation: false
  fsGroup:
    ranges:
      - min: 0
        max: 65535
    rule: MustRunAs
  hostIPC: false
  hostNetwork: false
  hostPID: false
  hostPorts: []
  privileged: false
  requiredDropCapabilities:
    - ALL
  runAsUser:
    rule: MustRunAsNonRoot
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    ranges:
      - min: 0
        max: 65535
    rule: MustRunAs
  volumes:
    - configMap
    - downwardAPI
    - emptyDir
    - persistentVolumeClaim
    - projected
    - secret

---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: #@ "aaa-{}-docker-session".format(data.values.operator.namePrefix)
spec:
  allowPrivilegeEscalation: true
  fsGroup:
    ranges:
      - min: 0
        max: 65535
    rule: MustRunAs
  hostIPC: false
  hostNetwork: false
  hostPID: false
  hostPorts: []
  privileged: true
  requiredDropCapabilities:
    - KILL
    - MKNOD
    - SETUID
    - SETGID
  runAsUser:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    ranges:
      - min: 0
        max: 65535
    rule: MustRunAs
  volumes:
    - configMap
    - downwardAPI
    - emptyDir
    - persistentVolumeClaim
    - projected
    - secret
#@ end
