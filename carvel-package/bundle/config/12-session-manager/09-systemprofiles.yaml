#@ load("@ytt:data", "data")
#@ load("/00-package.star", "image_pull_secrets")

---
apiVersion: #@ "training.{}/v1alpha1".format(data.values.operatorApiGroup)
kind: SystemProfile
metadata:
  name: default-system-profile
spec:
  storage:
    #@ if data.values.storageClass:
    class: #@ data.values.storageClass
    #@ end
    #@ if data.values.storageUser != None:
    user: #@ int(data.values.storageUser)
    #@ end
    #@ if data.values.storageGroup != None:
    group: #@ int(data.values.storageGroup)
    #@ end
  dockerd:
    mtu: #@ data.values.dockerDaemon.networkMTU
    rootless: #@ data.values.dockerDaemon.rootless
    #@ if data.values.dockerDaemon.proxyCache.remoteURL:
    mirror:
      remote: #@ data.values.dockerDaemon.proxyCache.remoteURL
      #@ if data.values.dockerDaemon.proxyCache.username:
      username: #@ data.values.dockerDaemon.proxyCache.username
      password: #@ data.values.dockerDaemon.proxyCache.password or ""
      #@ end
    #@ end
  portal:
    credentials:
      admin:
        #@ if data.values.portalCredentials.systemAdmin.username:
        username: #@ data.values.portalCredentials.systemAdmin.username
        #@ end
        #@ if data.values.portalCredentials.systemAdmin.password:
        password: #@ data.values.portalCredentials.systemAdmin.password
        #@ end
      robot:
        #@ if data.values.portalCredentials.clientAccess.username:
        username: #@ data.values.portalCredentials.clientAccess.username
        #@ end
        #@ if data.values.portalCredentials.clientAccess.password:
        password: #@ data.values.portalCredentials.clientAccess.password
        #@ end
  network:
    blockCIDRs: #@ data.values.clusterNetwork.blockCIDRs
  analytics:
    google: #@ data.values.workshopAnalytics.google
  theme:
    dashboard: #@ data.values.websiteStyling.workshopDashboard
    workshop: #@ data.values.websiteStyling.workshopInstructions
    portal: #@ data.values.websiteStyling.trainingPortal
