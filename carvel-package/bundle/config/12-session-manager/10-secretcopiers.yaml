#@ load("@ytt:data", "data")

#@ ingress_secret_ref_name = data.values.tlsCertificateRef.name
#@ ingress_secret_ref_namespace = data.values.tlsCertificateRef.namespace

#@ if ingress_secret_ref_name and ingress_secret_ref_namespace and ingress_secret_ref_namespace != data.values.namespace.name:
---
apiVersion: #@ "secrets.{}/v1alpha1".format(data.values.operatorApiGroup)
kind: SecretCopier
metadata:
  name: #@ "{}-ingress-secret".format(data.values.resourceNamePrefix)
spec:
  rules:
  - sourceSecret:
      name: #@ ingress_secret_ref_name
      namespace: #@ ingress_secret_ref_namespace
    targetNamespaces:
      nameSelector:
        matchNames:
        - #@ data.values.namespace.name
#@ end

#@ secrets = []
#@ for secret in data.values.imagePullSecretRefs:
#@   if secret["namespace"] and secret["namespace"] != data.values.namespace.name:
#@     secrets.append(secret)
#@   end
#@ end
#@ if secrets:
---
apiVersion: #@ "secrets.{}/v1alpha1".format(data.values.operatorApiGroup)
kind: SecretCopier
metadata:
  name: #@ "{}-image-pull-secrets".format(data.values.resourceNamePrefix)
spec:
  rules:
  #@ for secret in secrets:
  - sourceSecret:
      name: #@ secret["name"]
      namespace: #@ secret["namespace"]
    targetNamespaces:
      nameSelector:
        matchNames:
        - #@ data.values.namespace.name
  #@ end
#@ end
