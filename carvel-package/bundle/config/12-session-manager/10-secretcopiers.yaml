#@ load("@ytt:data", "data")
#@ load("/00-package.star", "image_pull_secrets")

#@ ingress_secret_ref_name = data.values.clusterIngress.tlsCertificateRef.name
#@ ingress_secret_ref_namespace = data.values.clusterIngress.tlsCertificateRef.namespace

#@ if ingress_secret_ref_name and ingress_secret_ref_namespace and ingress_secret_ref_namespace != data.values.operator.namespace:
---
apiVersion: #@ "secrets.{}/v1alpha1".format(data.values.operator.apiGroup)
kind: SecretCopier
metadata:
  name: #@ "{}-upstream-ingress-secret".format(data.values.operator.namePrefix)
spec:
  rules:
  - sourceSecret:
      name: #@ ingress_secret_ref_name
      namespace: #@ ingress_secret_ref_namespace
    targetNamespaces:
      nameSelector:
        matchNames:
        - #@ data.values.operator.namespace
---
apiVersion: #@ "secrets.{}/v1alpha1".format(data.values.operator.apiGroup)
kind: SecretCopier
metadata:
  name: #@ "{}-downstream-ingress-secret".format(data.values.operator.namePrefix)
spec:
  rules:
  - sourceSecret:
      name: #@ ingress_secret_ref_name
      namespace: #@ data.values.operator.namespace
    targetNamespaces:
      labelSelector:
        matchLabels:
          #@yaml/text-templated-strings
          (@= "training.{}/component".format(data.values.operator.apiGroup) @): portal
  - sourceSecret:
      name: #@ ingress_secret_ref_name
      namespace: #@ data.values.operator.namespace
    targetNamespaces:
      labelSelector:
        matchLabels:
          #@yaml/text-templated-strings
          (@= "training.{}/component".format(data.values.operator.apiGroup) @): environment
#@ end

#@ secrets = []
#@ for secret in data.values.clusterSecrets.pullSecretRefs:
#@   if secret["namespace"] and secret["namespace"] != data.values.operator.namespace:
#@     secrets.append(secret)
#@   end
#@ end
#@ if secrets:
---
apiVersion: #@ "secrets.{}/v1alpha1".format(data.values.operator.apiGroup)
kind: SecretCopier
metadata:
  name: #@ "{}-upstream-image-pull-secrets".format(data.values.operator.namePrefix)
spec:
  rules:
  #@ for secret in secrets:
  - sourceSecret:
      name: #@ secret["name"]
      namespace: #@ secret["namespace"]
    targetNamespaces:
      nameSelector:
        matchNames:
        - #@ data.values.operator.namespace
  #@ end
#@ end

#@ pull_secrets = image_pull_secrets()
#@ if pull_secrets:
---
apiVersion: #@ "secrets.{}/v1alpha1".format(data.values.operator.apiGroup)
kind: SecretCopier
metadata:
  name: #@ "{}-downstream-image-pull-secrets".format(data.values.operator.namePrefix)
spec:
  rules:
  #@ for name in pull_secrets:
  - sourceSecret:
      name: #@ name
      namespace: #@ data.values.operator.namespace
    targetNamespaces:
      labelSelector:
        matchLabels:
          #@yaml/text-templated-strings
          (@= "training.{}/component".format(data.values.operator.apiGroup) @): portal
  - sourceSecret:
      name: #@ name
      namespace: #@ data.values.operator.namespace
    targetNamespaces:
      labelSelector:
        matchLabels:
          #@yaml/text-templated-strings
          (@= "training.{}/component".format(data.values.operator.apiGroup) @): environment
  #@ end
#@ end
