#@ load("@ytt:data", "data")
#@ load("@ytt:library", "library")
#@ load("@ytt:template", "template")

#@ package = library.get("upstream")

#@ def kind_values():
contour:
  replicas: 1
  configFileContents:
    default-http-versions:
    - "HTTP/1.1"
envoy:
  service:
    type: ClusterIP
  hostPorts:
    enable: true
#@ end

#@ def azure_values():
contour:
  replicas: 1
envoy:
  service:
    type: LoadBalancer
    externalTrafficPolicy: Cluster
  hostPorts:
    enable: true
#@ end

#@ if data.values.clusterInfrastructure.provider == "kind":
#@ package = package.with_data_values(kind_values(), plain=True)
#@ end

#@ if data.values.clusterInfrastructure.provider == "azure":
#@ package = package.with_data_values(azure_values(), plain=True)
#@ end

#@ package = package.with_data_values(data.values.clusterPackages.contour.settings, plain=True)

--- #@ template.replace(package.eval())

#@ if data.values.clusterSecurity.policyEngine == "pod-security-policies":
---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: aa-contour-privileged
spec:
  privileged: true
  allowPrivilegeEscalation: true
  allowedCapabilities:
  - '*'
  volumes:
  - '*'
  hostNetwork: true
  hostPorts:
  - min: 0
    max: 65535
  hostIPC: true
  hostPID: true
  runAsUser:
    rule: 'RunAsAny'
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: contour-privileged-psp
rules:
- apiGroups:
  - policy
  resourceNames:
  - aa-contour-privileged
  resources:
  - podsecuritypolicies
  verbs:
  - use
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: contour-privileged-psp
  namespace: projectcontour
roleRef:
  kind: ClusterRole
  name: contour-privileged-psp
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: envoy
  namespace: projectcontour
#@ end
