#!/bin/bash

set -x

set -eo pipefail

# Make sure we are in the home directory because when in a dev container the
# initial current working directory of the terminal in VS Code can be a
# different directory.

cd $HOME

# Create directory for caching log files and other Educates data files.

mkdir -p $HOME/.local/share/workshop

# Set defaults for all the workshop variables. These will be overridden when
# deploying workshops using the operator, but will be used as a fallback when
# deploying workshops using docker. Note that INGRESS_PORT_SUFFIX should not
# be overriden if environment variable set but is empty.

WORKSHOP_NAME=${WORKSHOP_NAME:-workshop}
TRAINING_PORTAL=${TRAINING_PORTAL:-workshop}
ENVIRONMENT_NAME=${ENVIRONMENT_NAME:-workshop}
WORKSHOP_NAMESPACE=${WORKSHOP_NAMESPACE:-workshop}
SESSION_NAMESPACE=${SESSION_NAMESPACE:-workshop}

INGRESS_PROTOCOL=${INGRESS_PROTOCOL:-http}
INGRESS_DOMAIN=${INGRESS_DOMAIN:-127-0-0-1.nip.io}
INGRESS_PORT_SUFFIX=${INGRESS_PORT_SUFFIX-:10081}

export WORKSHOP_NAME
export TRAINING_PORTAL
export ENVIRONMENT_NAME
export WORKSHOP_NAMESPACE
export SESSION_NAMESPACE

export INGRESS_PROTOCOL
export INGRESS_DOMAIN
export INGRESS_PORT_SUFFIX

unset INGRESS_PORT

if [[ ${INGRESS_PORT_SUFFIX::1} == ":" ]]
then
    INGRESS_PORT="${INGRESS_PORT_SUFFIX:1}"
fi

if [ x"$INGRESS_PORT" == x"" ]; then
    if [ x"$INGRESS_PROTOCOL" == x"https" ]; then
        INGRESS_PORT=443
    else
        INGRESS_PORT=80
    fi
fi

export INGRESS_PORT

# Download any remote workshop content hosted on a remote server. The primary
# way of doing this is using vendir, the configuration for which is mounted into
# the workshop container by the operator. An older obsolete way is still
# supported with a custom script to download content. For the latter, the
# location of where the content was downloaded from will be saved in the
# $HOME/.local/share/workshop/workshop-files.txt file for use when doing manual
# updates. In both cases we will not fail when we can't download the workshop
# content. The file $HOME/.local/share/workshop/download-workshop.failed will be
# created in the event of an error so that the dashboard can display an error.
# Output from downloading the files is saved for debugging purposes to the file
# $HOME/.local/share/workshop/download-workshop.log.

DOWNLOAD_LOGFILE=$HOME/.local/share/workshop/download-workshop.log
DOWNLOAD_FAILED=$HOME/.local/share/workshop/download-workshop.failed

if [ -f /opt/eduk8s/config/vendir-assets-01.yaml -o -f /opt/eduk8s/config/vendir-packages.yaml ]; then
    if [ ! -f /opt/assets/vendir-assets-01.yaml -a ! -f /opt/packages/vendir-packages.yaml ]; then
        # In this case we are running in the main container and need to do the
        # download of the workshop content using vendir.

        (vendir-workshop || touch $DOWNLOAD_FAILED) 2>&1 | tee -a $DOWNLOAD_LOGFILE
    else
        # In this case workshop content was already downloaded from an init
        # container so we only need to merge the workshop content. Copy the
        # marker file for a failure and the log file to the same location as
        # when the download is done in the main container.

        if [ -f /opt/assets/download-workshop.failed ]; then
            touch $DOWNLOAD_FAILED
        fi

        if [ -f /opt/assets/download-workshop.log ]; then
            cat /opt/assets/download-workshop.log >> $DOWNLOAD_LOGFILE
        fi

        merge-workshop /opt/assets/files | tee -a $DOWNLOAD_LOGFILE
    fi
elif [ -d /opt/assets/files ]; then
    merge-workshop /opt/assets/files
else
    # In this case downloading workshop the old way which has been deprecated.

    DOWNLOAD_URL=${DOWNLOAD_URL:-$(workshop-definition -r '(.spec.content.files // "")')}

    if [ x"$DOWNLOAD_URL" != x"" ]; then
        (download-workshop "$DOWNLOAD_URL" || touch $DOWNLOAD_FAILED) 2>&1 | tee -a $DOWNLOAD_LOGFILE
    fi
fi

# Determine what bundled applications are enabled. These variables will control
# what is started up from supervisord and also checked by the gateway, rather
# than the original YAML, so environment variables can be used to override YAML
# values if necessary.

ENABLE_DASHBOARD=${ENABLE_DASHBOARD:-true}

ENABLE_CONSOLE=${ENABLE_CONSOLE:-$(application-enabled console false)}
ENABLE_EDITOR=${ENABLE_EDITOR:-$(application-enabled editor false)}
ENABLE_EXAMINER=${ENABLE_EXAMINER:-$(application-enabled examiner true)}
ENABLE_GIT=${ENABLE_GIT:-$(application-enabled git false)}
ENABLE_FILES=${ENABLE_FILES:-$(application-enabled files false)}
ENABLE_SLIDES=${ENABLE_SLIDES:-$(application-enabled slides false)}
ENABLE_TERMINAL=${ENABLE_TERMINAL:-$(application-enabled terminal true)}
ENABLE_WEBDAV=${ENABLE_WEBDAV:-$(application-enabled webdav false)}
ENABLE_WORKSHOP=${ENABLE_WORKSHOP:-$(application-enabled workshop true)}

if [ x"$WORKSHOP_ONLY" == x"true" ]; then
    ENABLE_DASHBOARD=false

    ENABLE_CONSOLE=false
    ENABLE_EDITOR=false
    ENABLE_EXAMINER=false
    ENABLE_FILES=false
    ENABLE_GIT=false
    ENABLE_SLIDES=false
    ENABLE_TERMINAL=false
    ENABLE_WEBDAV=false
    ENABLE_WORKSHOP=true

    DEFAULT_PAGE=workshop
fi

if [ x"$TERMINAL_ONLY" == x"true" ]; then
    ENABLE_DASHBOARD=false

    ENABLE_CONSOLE=false
    ENABLE_EDITOR=false
    ENABLE_EXAMINER=false
    ENABLE_FILES=false
    ENABLE_GIT=false
    ENABLE_SLIDES=false
    ENABLE_TERMINAL=true
    ENABLE_WEBDAV=false
    ENABLE_WORKSHOP=false

    DEFAULT_PAGE=terminal
fi

export ENABLE_DASHBOARD

export ENABLE_CONSOLE
export ENABLE_EDITOR
export ENABLE_EXAMINER
export ENABLE_FILES
export ENABLE_GIT
export ENABLE_SLIDES
export ENABLE_TERMINAL
export ENABLE_WEBDAV
export ENABLE_WORKSHOP

export DEFAULT_PAGE

# Run workshop specific setup scripts and then source the corresponding profile
# scripts as well so they are available for later setup scripts. Note that any
# errors in the profile scripts can cause the workshop container to not start.
# Since we cannot capture what happens in profile scripts into the log file, and
# because the container will not actually start anyway, it is necessary to look
# at the container log file instead. An error in setup scripts on the other
# hand shouldn't usually cause the container to not start and the log can be
# consulted from within the workshop session container.

WORKSHOP_ENV=/tmp/workshop-env-$$.sh

SETUP_LOGFILE=$HOME/.local/share/workshop/setup-scripts.log
SETUP_FAILED=$HOME/.local/share/workshop/setup-scripts.failed

rm -f $SETUP_FAILED

rm -f $SETUP_LOGFILE
touch $SETUP_LOGFILE

function execute_setup_script() {
    local script=$1
    echo "Executing: $script"
    WORKSHOP_ENV=$WORKSHOP_ENV sh -x $script || touch $SETUP_FAILED || true
    cat $WORKSHOP_ENV
}

for script in /opt/eduk8s/etc/setup.d/*.sh; do
    if [ -x "$script" ]; then
        truncate -s 0 $WORKSHOP_ENV
        execute_setup_script $script 2>&1 | tee -a $SETUP_LOGFILE
        set -a; . $WORKSHOP_ENV; set +a
        rm -f $WORKSHOP_ENV
    fi
done

for script in /opt/eduk8s/etc/profile.d/*.sh /opt/eduk8s/etc/profile.d/sh.local; do
    if [ -r "$script" ]; then
        echo "Source: $script"
        . "$script"
    fi
done

for script in /opt/packages/*/setup.d/*.sh; do
    if [ -x "$script" ]; then
        truncate -s 0 $WORKSHOP_ENV
        execute_setup_script $script 2>&1 | tee -a $SETUP_LOGFILE
        set -a; . $WORKSHOP_ENV; set +a
        rm -f $WORKSHOP_ENV
    fi
done

for script in /opt/packages/*/profile.d/*.sh /opt/packages/*/profile.d/sh.local; do
    if [ -r "$script" ]; then
        echo "Source: $script"
        . "$script"
    fi
done

for script in /opt/workshop/setup.d/*.sh; do
    if [ -x "$script" ]; then
        truncate -s 0 $WORKSHOP_ENV
        execute_setup_script $script 2>&1 | tee -a $SETUP_LOGFILE
        set -a; . $WORKSHOP_ENV; set +a
        rm -f $WORKSHOP_ENV
    fi
done

for script in /opt/workshop/profile.d/*.sh /opt/workshop/profile.d/sh.local; do
    if [ -r "$script" ]; then
        echo "Source: $script"
        . "$script"
    fi
done

for script in $HOME/workshop/setup.d/*.sh; do
    if [ -x "$script" ]; then
        truncate -s 0 $WORKSHOP_ENV
        execute_setup_script $script 2>&1 | tee -a $SETUP_LOGFILE
        set -a; . $WORKSHOP_ENV; set +a
        rm -f $WORKSHOP_ENV
    fi
done

for script in $HOME/workshop/profile.d/*.sh $HOME/workshop/profile.d/sh.local; do
    if [ -r "$script" ]; then
        echo "Source: $script"
        . "$script"
    fi
done

# Run supervisord. See /opt/eduk8s/etc/supervisord.conf for the main
# configuration. This is also symlinked to /etc/supervisord.conf so that
# supervisorctl can find it without needing to provide a command line argument
# to tell it. We dump out the shell environment to the logs for debugging
# purposes when something goes wrong.

ENABLE_EDITOR_PROCESS=$ENABLE_EDITOR
ENABLE_GIT_PROCESS=$ENABLE_GIT
ENABLE_WEBDAV_PROCESS=$ENABLE_WEBDAV

ENABLE_CONSOLE_KUBERNETES_PROCESS=$ENABLE_CONSOLE_KUBERNETES
ENABLE_CONSOLE_OCTANT_PROCESS=$ENABLE_CONSOLE_OCTANT

ENABLE_WORKSHOP_PROCESS=$ENABLE_WORKSHOP

if [ x"$ENABLE_WORKSHOP" == x"true" ]; then
    if [[ "$WORKSHOP_URL" =~ ^(https?|\$\(ingress_protocol\))://.* ]]; then
        ENABLE_WORKSHOP_PROCESS=false
    fi
fi

export ENABLE_EDITOR_PROCESS
export ENABLE_GIT_PROCESS
export ENABLE_WEBDAV_PROCESS

export ENABLE_CONSOLE_KUBERNETES_PROCESS
export ENABLE_CONSOLE_OCTANT_PROCESS

export ENABLE_WORKSHOP_PROCESS

env | sort

exec supervisord --nodaemon
